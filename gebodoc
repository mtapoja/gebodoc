#!/usr/bin/python2
# -*- coding: utf-8 -*-
"""
gebodoc - information combinator and document generator.
"""

#  gebodoc - information combinator and document generator.
#  Copyright (c)  2014  Mika Tapoj√§rvi <mika.tapojarvi@embelin.fi>.
#
#  Distributed under the MIT License, see file LICENSE.
#  For full list of contributors, see file AUTHORS.
#
#  This file is part of gebodoc.


from __future__ import print_function

import os
import sys
import argparse
import logging
import ConfigParser
#import xlrd
#from Cheetah.Template import Template
#import tempfile
#import commands
#import subprocess
#import shutil
#import re
#from jira.client import JIRA


def main():
    """
    Main function, call arguments parser and run stuff.
    """

    logging.info('entering main()')
    args = initialize_args().parse_args()

    if len(sys.argv) == 1:
        print('%s\nMore options with -h or --help parameters.' % shortdesc)

    else:
        if args.configfiles:
            doc = Documenter(args.configfiles)
            doc.parse_configuration()
        else:
            logging.warning('no configfile')


def initialize_args():
    """
    Define all parameters.
    """
    global shortdesc


    logging.info('entering initialize_args()')

    shortdesc = ('gebodoc - Collect information from several sources and create'
        ' documents out of them.')
    exampledesc = 'example: '
    parser = argparse.ArgumentParser(
        description=shortdesc, epilog=exampledesc,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument(
        '-v', '--version', action='version', version='%(prog)s ' + VERSION,
        help='Version of %(prog)s script')
    parser.add_argument(
        '-c', '--configfiles', action='append', dest='configfiles',
        help='Document configuration file that uses INI syntax. This parameter'
        ' can be used more than once.')
    return parser


class Documenter(object):
    """
    Documenter class contains all needed calls to information readers, contains
    the collected information and then calls appropriate output document
    builders or compilers.
    """

    def __init__(self, conf):
        """
        conf: configuration file name.
        """
        logging.info('Initializing Documenter class, conffile: %s' % conf)

        self.configuration = conf


    def parse_configuration(self):
        """
        Read and parse the configuration file.
        """
        logging.info('entering Doc:parse_configuration')
        confparser = ConfigParser.RawConfigParser()
        confparser.read(self.configuration)

        # Initialize variables
        self.document_name = ''

        for section in confparser.sections():

            # Set basic document information to variables
            if section == 'document':
                logging.info('document info section:')

                for an_item in confparser.items(section):
                    if an_item[0] == 'docname':
                        self.document_name = an_item[1]
                        logging.info('  document name: %s' % self.document_name)

                    if an_item[0] == 'doctemplatefile':
                        self.document_template = an_item[1]
                        if os.path.isfile(self.document_template):
                            logging.info('  document template: %s, file found' % self.document_template)
                        else:
                            logging.error('  document template: %s, FILE NOT FOUND!' % self.document_template)

                    if an_item[0] == 'outputformat':
                        self.document_outputformat= an_item[1]
                        logging.info('  document output format: %s' % self.document_outputformat)
            else:
                logging.debug('section: %s' % section)
                for an_item in confparser.items(section):

                    # Read and process data fields

                    # If first character is |, an_item defines a list.
                    if an_item[1][0] == '|':
                        logging.debug('  key: %s, list format found!' % an_item[0])
                        for list_item in an_item[1].split('|'):
                            if list_item == '':
                                logging.debug('    +-------------------+---------------------------------------+')
                            else:
                                logging.debug('    | {0:18s}| {1:38s}|'.format(list_item.split('?')[0].strip(), list_item.split('?')[1].strip()))

                    else:
                        logging.debug('  item: %s = %s ' % (an_item[0], an_item[1]))


    def read_information(self):
        """
        Read information from all sources configuration file defines.
        """
        logging.info('entering Doc:read_information')
        print('Reading information')



if __name__ == '__main__':
    VERSION = '0.1-dev'

    #logging.basicConfig(filename='gebodoc.log', level=logging.DEBUG)
    logging.basicConfig(level=logging.DEBUG)
    logging.info('Starting gebodoc ver. ' + VERSION)

    main()

