#!/usr/bin/python2
# -*- coding: utf-8 -*-
"""
gebodoc - information combinator and document generator.
"""

#  gebodoc - information combinator and document generator.
#  Copyright (c)  2014 - 2015  Mika Tapoj√§rvi <mika.tapojarvi@embelin.fi>.
#
#  Distributed under the MIT License, see file LICENSE.
#  For full list of contributors, see file AUTHORS.
#
#  This file is part of gebodoc.


from __future__ import print_function
import os
import sys
import argparse
import logging
import ConfigParser
from Cheetah.Template import Template
import tempfile
import subprocess
import shutil
#import xlrd
#import commands
#import subprocess
#import re
#from jira.client import JIRA


def main():
    """
    Main function, call arguments parser and run stuff.
    """

    logging.info('entering main()')
    args = initialize_args().parse_args()

    if len(sys.argv) == 1:
        print('%s\nMore options with -h or --help parameters.' % shortdesc)

    else:
        if args.configfiles:
            doc = Documenter(args.configfiles)
            doc.parse_configuration()
            doc.process_template()
        else:
            logging.warning('no configfile')


def initialize_args():
    """
    Define all parameters.
    """
    global shortdesc


    logging.info('entering initialize_args()')

    shortdesc = ('gebodoc - Collect information from several sources and create'
        ' documents out of them.')
    exampledesc = 'example: '
    parser = argparse.ArgumentParser(
        description=shortdesc, epilog=exampledesc,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument(
        '-v', '--version', action='version', version='%(prog)s ' + VERSION,
        help='Version of %(prog)s script')
    parser.add_argument(
        '-c', '--configfiles', action='append', dest='configfiles',
        help='Document configuration file that uses INI syntax. This parameter'
        ' can be used more than once.')
    return parser


# from: http://stackoverflow.com/questions/35988/c-like-structures-in-python
#class StructMap(dict):
#    def __init__(self, **kwargs):
#        super(StructMap, self).__init__(**kwargs)
#        self.__dict__ = self


class Documenter(object):
    """
    Documenter class contains all needed calls to information readers, contains
    the collected information and then calls appropriate output document
    builders or compilers.
    """

    def __init__(self, conf, testing_active=False):
        """
        conf: configuration file name.
        """
        logging.info('Initializing Documenter class, conffile: %s' % conf)

        # Initialize variables
        self.data = {}
        self.listdata = []
        self.document_name = ''
        self.document_template = ''
        self.document_template_found = False
        self.document_outputformat = ''
        self.testing_active = testing_active
        if self.testing_active:
            logging.info('Testing is active')


        self.configuration = conf


    def parse_configuration(self):
        """
        Read and parse the configuration file.
        """
        logging.info('entering Doc:parse_configuration')
        confparser = ConfigParser.RawConfigParser()
        confparser.read(self.configuration)

        for section in confparser.sections():

            # Set basic document information to variables
            if section == 'document':
                logging.info('document info section:')

                for an_item in confparser.items(section):
                    if an_item[0] == 'docname':
                        self.document_name = an_item[1]
                        logging.info('  document name: %s' % self.document_name)

                    if an_item[0] == 'doctemplatefile':
                        self.document_template = an_item[1]
                        if os.path.isfile(self.document_template):
                            logging.info(
                                '  document template: %s, file found' %
                                self.document_template)
                            self.document_template_found = True
                        else:
                            logging.error(
                                '  document template: %s, FILE NOT FOUND!' %
                                self.document_template)
                            self.document_template_found = False

                    if an_item[0] == 'outputformat':
                        self.document_outputformat = an_item[1]
                        logging.info(
                            '  document output format: %s' %
                            self.document_outputformat)
            else:
                logging.debug('section: %s' % section)
                for an_item in confparser.items(section):

                    # Read and process data fields

                    # If first character is |, an_item defines a list.
                    if an_item[1][0] == '|':
                        logging.debug(
                            '  key: %s, list format found!' %
                            an_item[0])

                        temporarylist = []
                        columns = 0

                        # | character is also a list row separator, break
                        # a configuration item to list_row.
                        for list_row in an_item[1].split('|'):
                            varlist = []
                            if list_row == '':
                                pass
                            else:
                                if not columns:
                                    columns = len(list_row.split('?'))

                                debugstr = '    | '

                                # One list_row has columns separated by ?
                                # character, split columns to list_column.
                                for list_column in list_row.split('?'):
                                    list_column = list_column.replace('\n', '')
                                    varlist.append(list_column)
                                    debugstr += list_column + ' | '
                                logging.debug(debugstr)

                            if varlist:
                                temporarylist.append(tuple(varlist))

                        if temporarylist:
                            self.listdata.append(temporarylist)

                    else:
                        logging.debug(
                            '  item: %s = %s ' %
                            (an_item[0], an_item[1]))
                        self.data[an_item[0]] = an_item[1]


    def read_information(self):
        """
        Read information from all sources the configuration file defines.
        """
        logging.info('entering Doc:read_information')
        print('Reading information')


    def process_template(self):
        """
        Read and process the template file and print it to a temporary output file, if needed.
        The temp file can be processed to another format such as PDF. Text outputformat does
        not need temp file.
        """
        logging.info('entering Doc:process_template')

        if self.document_outputformat == 'text':
            document_out = open(self.document_name, 'w+')
            print(
                Template(
                    file = self.document_template,
                    searchList = [{'docdata' : self.data,
                        'listdata' : self.listdata}]),
                    file=document_out)
        elif self.document_outputformat == 'pdf':
            # A temporary output file for final LaTeX
            tmplatexout = tempfile.NamedTemporaryFile(
                mode='w+',
                dir='/tmp/',
                delete=False)
            print(
                Template(
                    file = self.document_template,
                    searchList = [{'docdata' : self.data,
                        'listdata' : self.listdata}]),
                    file=tmplatexout)
            tmplatexout.seek(0)
            tmplatexout.flush()

            logging.debug('tmplatexout: %s to pdf' % tmplatexout.name)

            try:
                subprocess.call(['rubber', '-d', tmplatexout.name])
                subprocess.call(['rubber', '--clean', tmplatexout.name])
            except:
                logging.debug('Something went wrong in rubber command')

            if os.path.isfile(tmplatexout.name):
                tmppdfpath, tmppdf = os.path.split(tmplatexout.name)
                tmppdf = tmppdf + '.pdf'

                if self.document_name.find('.pdf') == -1 and self.document_name.find('.PDF') == -1:
                    self.document_name = self.document_name + '.pdf'

                shutil.move(tmppdf, self.document_name)

                if self.testing_active:
                    result_latex_file = self.document_name.replace('.pdf', '.tex')
                    shutil.copyfile(tmplatexout.name, result_latex_file)

                logging.debug('You should now have %s' % self.document_name)
                os.unlink(tmplatexout.name)


if __name__ == '__main__':
    VERSION = '0.0.3-dev'

    #logging.basicConfig(filename='gebodoc.log', level=logging.DEBUG)
    logging.basicConfig(level=logging.DEBUG)
    logging.info('Starting gebodoc ver. ' + VERSION)

    main()

